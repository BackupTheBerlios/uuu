<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"[]>

<book id="Udbfs.Internals">
 <bookinfo>
  <title>The Unununium DataBase File System</title>
  <subtitle>Internal Layout</>

  <authorgroup>
   <author>
    <firstname>Dave</firstname>
    <surname>Poirier</surname>
    <affiliation>
     <address>
      <email>instinc@users.berlios.de</email>
     </address>
    </affiliation>
   </author>

  </authorgroup>

  <copyright>
   <year>2003</year>
   <holder>Dave Poirier</holder>
  </copyright>

  <legalnotice>
   <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1
	or any later version published by the Free Software Foundation;
	with no Invariant Sections, with no Front-Cover Texts, and with no
	Back-Cover Texts. A copy of the license can be acquired electronically
	from http://www.fsf.org/licenses/fdl.html or by writing to 
	59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
   </para>
  </legalnotice>
 </bookinfo>

 
<toc></toc>

 <preface>
  <title>About this book</title>
  <para>
   The latest version of this document may be downloaded from http://uuu.berlios.de/
  </para><para>
   This document is intended as a guide to the internal layout and default allocation algorithms of the
   Unununium Database File System. The reader should have a good understanding of the purpose of a file
   system as well as the associated vocabulary (file, directory, partition, etc).
  </para><para>
   The Unununium Database File System was designed from the ground up as a solution to providing both
   standard file services and common database services in a new insightful way.
  </para><para>
   This file system is, at the date of this writing, the base of the Unununium Operating System.
  </para>
 </preface>

 <chapter id="design-origins">
  <title>Design Origins</title>

  <sect1 id="conventional-fs"><title>Conventional File Systems</title>
   <para>
    In current conventional operating systems, we find a 'file' based file system on top of which may be
    stored a database. The two interfaces are independent of each other. In those systems, accessing the
    database and the file system are done via two totally different API. The database engine does not know
    the structure of the underlying file system; similarly the file system does not know the structures of the
    database.
   </para><para>
    This abstraction causes a few problems. A conventional file system is very slow to traverse, such as when
    searching for a file. The database cannot be accessed easily using the standard file system utilities (cat, ls,
    cd, ...). File system information, such as total disk size, is not available using the database API.
   </para><para>
    Additionally, developing an application that requires to access both file and database means interfacing
    to two separate API, thus resulting into a larger application. In the case where the application does use a
    database, we are left with a dependency to yet another application.
   </para>
  </sect1>
  <sect1 id="previous-dbfs-attempts"><title>Previous DataBase File Systems Attempts</title>
   <sect2 id="ntfs"><title>NTFS</title>
    <para>
     This file system is developed by Microsoft and has been in use for a few years in the Windows NT/XP
     operating systems. While originally not a database file system, Microsoft's latest development are to add
     a SQL-like database on top of the file system that will be used to store attributes and generate indexes.
    </para><para>
     While having the benefit of being backward compatible, this approach does not solve application's
     problems but rather add another layer of complexity with yet a larger API to access those extended
     attributes. Applications still have to implement their own file management procedures or still have to
     make use of an external database to store defined format records.
    </para>
   </sect2>
   <sect2 id="bdbfs"><title>BDBFS</title>
    <para>
     The Berkeley DataBase File System is a file system developed to work entirely on top of a Berkeley
     DataBase to provide a flexible/indexable file system.
    </para><para>
     Benefits of this approach are that the structures of the file system are not fixed. They can be resized,
     columns added or removed, which provide the system administrator with great flexibility and the ability
     to access any of this information using commonly available tools.
    </para><para>
     The downside is performance and ability to store and retrieve large files. Databases are known to be fast
     at searching information, but not very space efficient in doing so. Most databases being on top of existing
     file systems, therefore in order to write a file, you have to traverse the database layer and then traverse an
     "os" file layer to finally find your way down to the disk. A few database interfaces also have limitations
     on the amount of data that can be retrieved in a single query, limiting the maximum file size; as well as
     providing no mechanisms to retrieve only a small part of that data.
    </para>
   </sect2>
  </sect1>
  <sect1 id="unununium-approach"><title>The Unununium Approach</title>
   <para>
    In our view, a perfect design is one that offers the best of both world, the fast and precise data retrieval of
    a standard file system with the speed and flexibility of a database engine.
   </para><para>
    To achieve this, the Unununium Database File System has been built from the ground up with those
    concepts in mind. We started with inode and block principles similar to those found in the Second
    Extended File System, table and column descriptions standard in SQL and a myriad of small
    improvements and additional features to simplify storage and retrieval of information in a common
    unified API.
   </para><para>
    The resulting file system allow an application to create an SQL table as easily as creating a file, using the
    same API; merges the concepts of listing a directory and performing a select on a few specific ordered
    columns; pushes the concept of a symbolic link to not only point to a file but also point to either a table
    or a table row; while keeping the storage effectiveness of a standard file system.
   </para><para>
    In the Unununium Database File System, a database is not a file on top of an existing file system, a file
    not a restrained row in an overcrowded database table. We merge the two concepts to the very byte
    layout on disk, pushing the limits of a file system to a whole new level.
   </para>
  </sect1>
 </chapter>

 <chapter id="disk-layout"><title>Disk Layout</title>
  <para>
   A Unununium Database File System spawns an entire partition or disk on which it is stored. The surface
   covered is split into "blocks" of pre-determined sizes and a bitmap of the free and allocated blocks is
   carefully located.
  </para><para>
   At the head of the storage space is a "superblock" containing information about the file system
   properties, such as the size of each block, how many of them there are, where the allocation bitmap is
   located, etc.
  </para><para>
   A group of inodes is further created, keeping track of the location and size on disk of the various files
   and tables.
  </para>

  <sect1 id="superblock"><title>Superblock</title>
   <para>
    Located at offset 1024 (in bytes) from the start of the disk/partition, this structure details the
    properties of the file system.
   </para><figure><title>superblock structure - version 01</title><programlisting>
offset  size    description
------- ------- -----------
      0       8 <link linkend="s-boot-loader-inode">s_boot_loader_inode</>
      8       8 <link linkend="s-inode-first-block">s_inode_first_block</>
     16       8 <link linkend="s-unique-fs-signature">s_unique_fs_signature</>
     24       8 <link linkend="s-block-count">s_block_count</>
     32       8 <link linkend="s-inode-count">s_inode_count</>
     40       8 <link linkend="s-free-block-count">s_free_block_count</>
     48       8 <link linkend="s-free-inode-count">s_free_inode_count</>
     56       8 <link linkend="s-bitmaps-block">s_bitmaps_block</>
     64       8 <link linkend="s-journal-inode">s_journal_inode</>
     72       8 <link linkend="s-bad-block-inode">s_bad_block_inode</>
     80       8 <link linkend="s-magic-number">s_magic_number</>
     88       8 <link linkend="s-last-check">s_last_check</>
     96       8 <link linkend="s-max-interval">s_max_interval</>
    104       8 <link linkend="s-last-mount">s_last_mount</>
    112       1 <link linkend="s-mount-count">s_mount_count</>
    113       1 <link linkend="s-max-mount-count">s_max_mount_count</>
    114       1 <link linkend="s-creator-os">s_creator_os</>
    115       1 <link linkend="s-superblock-version">s_superblock_version</>
    116       1 <link linkend="s-log-block-size">s_log_block_size</>
    117       1 <link linkend="s-inode-format">s_inode_format</>
    118       2 <link linkend="s-extensions">s_extensions</>
---------------------------
total size: 120 bytes</programlisting></figure>
   <sect2 id="s-bad-block-inode"><title>Bad Block Inode</title>
    <programlisting>
label: s_bad_block_inode         offset: 72 (0x48)
name : Bad Block Inode           size  : unsigned 64bit</programlisting>
    <para>
     Inode ID for the <link linkend="bad-block-file">Bad Block File</link>
    </para>
   </sect2>
   <sect2 id="s-bitmaps-block"><title>Bitmaps Block</title>
    <programlisting>
label: s_bitmaps_block           offset: 56 (0x38)
name : Bitmaps Block             size  : unsigned 64bit</programlisting>
    <para>
     Block ID where the <link linkend="block-allocation-bitmap">Block Allocation Bitmap</link> and
     <link linkend="inode-allocation-bitmap">Inode Allocation Bitmap</link> are starting.  For example, if
     those bitmaps are stored from block 43 to block 57, the Block ID would be set to 43.
    </para>
   </sect2>
   <sect2 id="s-block-count"><title>Block Count</title>
    <programlisting>
label: s_block_count             offset: 24 (0x18)
name : Block Count               size  : unsigned 64bit</programlisting>
    <para>
     Number of blocks contained in the file system.  This value combined with the <structfield>Log Block Size</>
     can be used to compute the file system total storage capacity.
    </para>
   </sect2>
   <sect2 id="s-boot-loader-inode"><title>Boot Loader Inode</title>
    <programlisting>
label: s_boot_loader_inode       offset: 00 (0x00)
name : Boot Loader Inode         size  : unsigned 64bit</programlisting>
    <para>
     Inode ID for the operating system boot loader.  A value of 0 indicate no boot loader has been set.
    </para>
   </sect2>
   <sect2 id="s-creator-os"><title>Creator OS</title>
    <programlisting>
label: s_creator_os              offset: 114 (0x72)
name : Creator OS                size  : unsigned 8bit</programlisting>
    <para>
     ID of the operating system used to create the file system.  Defined values are:
    </para><table frame=none pgwide=1 id="udbfs-os"><title>UDBFS_OS values</title>
     <tgroup cols=3 align=left>
      <colspec colwidth="40*">
      <colspec colwidth="20*">
      <colspec colwidth="40*">
      <tbody>
       <row><entry>UDBFS_OS_LINUX</><entry>0</><entry>Linux</></>
       <row><entry>UDBFS_OS_HURD</><entry>1</><entry>Hurd</></>
       <row><entry>UDBFS_OS_MASIX</><entry>2</><entry>MASIX</></>
       <row><entry>UDBFS_OS_FREEBSD</><entry>3</><entry>FreeBSD</></>
       <row><entry>UDBFS_OS_LITES4</><entry>4</><entry>Lites</></>
       <row><entry>UDBFS_OS_UNUNUNIUM</><entry>8</><entry>Unununium</></>
      </tbody>
     </tgroup>
    </table>
   </sect2>
   <sect2 id="s-extensions"><title>Extensions</title>
    <programlisting>
label: s_extensions              offset: 118 (0x76)
name : Extensions                size  : unsigned 8bit + unsigned 8bit</programlisting>
    <para>
     Extension ID followed by the Superblock Extension Size in bytes.  An extension defines
     additional properties of the file system, or ways to handle it.  Each extension is
     assigned an Extension ID and the required extension information structure size is
     recorded as the Superblock Extension Size.
    </para><para>
     If no extension is defined, then the Extension ID and Superblock Extension Size will both
     be set to 0.
    </para>
   </sect2>
   <sect2 id="s-free-block-count"><title>Free Block Count</title>
    <programlisting>
label: s_free_block_count        offset: 40 (0x28)
name : Free Block Count          size  : unsigned 64bit</programlisting>
    <para>
     Number of unallocated blocks.  This value should match the number of bits set to 1 in the
     <link linkend="block-allocation-bitmap">Block Allocation Bitmap</link> and should always be
     smaller than <link linkend="s-block-count">s_block_count</link>.
    </para>
   </sect2>
   <sect2 id="s-free-inode-count"><title>Free Inode Count</title>
    <programlisting>
label: s_free_inode_count        offset: 48 (0x30)
name : Free Inode Count          size  : unsigned 64bit</programlisting>
    <para>
     Number of unallocated inodes.  This value should match the number of bits set to 1 in the
     <link linkend="inode-allocation-bitmap">Inode Allocation Bitmap</link> and should always be
     smaller than <link linkend="s-inode-count">s_inode_count</link>.
    </para>
   </sect2>
   <sect2 id="s-inode-count"><title>Inode Count</title>
    <programlisting>
label: s_inode_count             offset: 32 (0x20)
name : Inode Count               size  : unsigned 64bit</programlisting>
    <para>
     Number of inodes contained in the file system.  This value dictates how many separate "files" can
     be stored on the file system.
    </para>
   </sect2>
   <sect2 id="s-inode-format"><title>Inode Format</title>
    <programlisting>
label: s_inode_format            offset: 117 (0x75)
name : Inode Format              size  : unsigned 8bit</programlisting>
    <para>
     Inode format version marker.
    </para>
   </sect2>
   <sect2 id="s-inode-first-block"><title>Inode First Block</title>
    <programlisting>
label: s_inode_first_block       offset: 08 (0x08)
name : Inode First Block         size  : unsigned 64bit</programlisting>
    <para>
     Block ID of the first inode description.  See <link linkend="inode-table">Inode Table</link> for more
     information.
    </para>
   </sect2>
   <sect2 id="s-journal-inode"><title>Journal Inode</title>
    <programlisting>
label: s_journal_inode           offset: 64 (0x40)
name : Journal Inode             size  : unsigned 64bit</programlisting>
    <para>
     Inode ID of the <link linkend="journal-file">Journal File</link>.
    </para>
   </sect2>
   <sect2 id="s-last-check"><title>Last Check</title>
    <programlisting>
label: s_last_check              offset: 88 (0x58)
name : Last Check                size  : unsigned 64bit</programlisting>
    <para>
     Timestamp of the last file system check.  The timestamp is stored in <link linkend="uuu-time">UUU-Time</link>
     format.
    </para>
   </sect2>
   <sect2 id="s-last-mount"><title>Last Mount</title>
    <programlisting>
label: s_last_mount              offset: 104 (0x68)
name : Last Mount                size  : unsigned 64bit</programlisting>
    <para>
     Timestamp of the last file system read/write mount operation. The timestamp is stored in <link linkend="uuu-time">UUU-Time</link>
     format.
    </para>
   </sect2>
   <sect2 id="s-log-block-size"><title>Log Block Size</title>
    <programlisting>
label: s_log_block_size          offset: 116 (0x74)
name : Log Block Size            size  : unsigned 8bit</programlisting>
    <para>
     Log base 2 of a block size in bytes.  This value is used to determine the block size used by the file system
     using: (2 ^ (7 + s_log_block_size))
    </para>
   </sect2>
   <sect2 id="s-magic-number"><title>Magic Number</title>
    <programlisting>
label: s_magic_number            offset: 80 (0x50)
name : Magic Number              size  : unsigned 64bit</programlisting>
    <para>
     Magic number identifying the file system as UDBFS.  The current signature value is 0x293A5F5346424455 or "UDBFS_:)" in ASCII.
    </para>
   </sect2>
   <sect2 id="s-max-interval"><title>Max Interval</title>
    <programlisting>
label: s_max_interval            offset: 96 (0x60)
name : Max Interval              size  : unsigned 64bit</programlisting>
    <para>
     Maximum time interval between file system checks.  The time interval is stored in <link linkend="uuu-time">UUU-Time</link> format.
    </para>
   </sect2>
   <sect2 id="s-max-mount-count"><title>Max Mount Count</title>
    <programlisting>
label: s_max_mount_count         offset: 113 (0x71)
name : Max Mount Count           size  : unsigned 8bit</programlisting>
    <para>
     Maximum number of read/write mount operations before forcing a file system check.
    </para>
   </sect2>
   <sect2 id="s-mount-count"><title>Mount Count</title>
    <programlisting>
label: s_mount_count             offset: 112 (0x70)
name : Mount Count               size  : unsigned 8bit</programlisting>
    <para>
     Number of read/write mount operations performed since the last file system check.
    </para>
   </sect2>
   <sect2 id="s-superblock-version"><title>Superblock Version</title>
    <programlisting>
label: s_superblock_version      offset: 115 (0x73)
name : Superblock Version        size  : unsigned 8bit</programlisting>
    <para>
     Superblock version marker.
    </para>
   </sect2>
   <sect2 id="s-unique-fs-signature"><title>Unique FS Signature</title>
    <programlisting>
label: s_unique_fs_signature     offset: 16 (0x10)
name : Unique FS Signature       size  : unsigned 64bit</programlisting>
    <para>
     (Hopefully) Unique signature created at format time.
    </para>
   </sect2>
  </sect1>

  <sect1 id="block-allocation-bitmap"><title>Block Allocation Bitmap</title>
   <para>
    Each bit represents the allocation status of a unique block on the file system.  A value of 1 indicates the block is
    currently unallocated and available.  A value of 0 indicates the block is either allocated to a file or inaccessible (bad block,
    reserved, past end of disk storage).
   </para><para>
    Block ID 0 is represented by bit 0 of byte 0; Block ID 1 by bit 1 of byte 0; ... Block ID 7 by bit 7 of byte 0; Block ID 8 by
    bit 0 of byte 1; etc.
   </para><para>
    The Block Allocation Bitmap can be located using the <link linkend="s-bitmaps-block">s_bitmaps_block</link> value in the
    <link linkend="superblock">Superblock</link>.
   </para><para>
    The size of the Block Allocation Bitmap can be determined using: ((<link linkend="s-block-count">s_block_count</> + 7 ) >> 3)
   </para>
  </sect1>
  <sect1 id="inode-allocation-bitmap"><title>Inode Allocation Bitmap</title>
   <para>
    Each bit represents the allocation status of a unique inode on the file system.  A value of 1 indicates the inode is
    currently unallocated and available.  A value of 0 indicates the inode is either allocated or reserved.
   </para><para>
    Inode ID 0 is represented by bit 0 of byte 0; Inode ID 1 by bit 1 of byte 0; ... Inode ID 7 by bit 7 of byte 0; Inode ID 8 by
    bit 0 of byte 1; etc.
   </para><para>
    The Inode Allocation Bitmap is located on the next byte boundary immediately after the
    <link linkend="block-allocation-bitmap">Block Allocation Bitmap</link>.
   </para><para>
    The size of the Inode Allocation Bitmap can be determined using: ((<link linkend="s-inode-count">s_inode_count</> + 7 ) >> 3)
   </para>
  </sect1>

  <sect1 id="inode-table"><title>Inode Table</title>
   <para>
    The Inode Table is an array of <link linkend="inode">Inode</link> structures, each describing a different file in the file
    system.  The <link linkend="inode-allocation-bitmap">Inode Allocation Bitmap</link> is used to indicate the status of each
    entry of the Inode Table.
   </para><para>
    The table can be located using the <link linkend="s-inode-first-block">s_inode_first_block</link> value of the
    <link linkend="superblock">Superblock</link>.
   </para>

   <sect2 id="inode"><title>Inode</title>
    <para>
     An Inode is a structure describing a file, its size and location.  A file can be a table, a table index, an aggregate of
     column data or a raw file.  The structure is as follows:
    </para><figure><title>inode structure - version 01</title><programlisting>
offset  size    description
------- ------- -----------
      0       8 <link linkend="i-size">i_size</link>
      8      32 <link linkend="i-block">i_block</link>
     40       8 <link linkend="i-ind-block">i_ind_block</link>
     48       8 <link linkend="i-bind-block">i_bind_block</link>
     56       8 <link linkend="i-tind-block">i_tind_block</link>
---------------------------
total size: 64 bytes</programlisting></figure>
    <sect3 id="i-size"><title>Size</title>
     <programlisting>
label: i_size                    offset: 00 (0x00)
name : Size                      size  : unsigned 64bit</programlisting>
     <para>
      Indicates the size in bytes of the described file.
     </para>
    </sect3>
    <sect3 id="i-block"><title>Direct Blocks</title>
     <programlisting>
label: i_block                   offset: 08 (0x08)
name : Size                      size  : 4 x unsigned 64bit</programlisting>
     <para>
      Array of 4 unsigned 64bit Block ID containing the first few blocks of storage of the file.  A Block ID of 0 means
      no block has been assigned.
     </para>
    </sect3>
    <sect3 id="i-ind-block"><title>Indirect Block</title>
     <programlisting>
label: i_ind_block               offset: 40 (0x28)
name : Indirect Block            size  : unsigned 64bit</programlisting>
     <para>
      Block ID of an Indirect Block.  An Indirect Block is a block that contains an array of Block ID, each pointing to a block
      containing a part of the file.
     </para>
    </sect3>
    <sect3 id="i-bind-block"><title>Bi-Indirect Block</title>
     <programlisting>
label: i_bind_block              offset: 48 (0x30)
name : Bi-Indirect Block         size  : unsigned 64bit</programlisting>
     <para>
      Block ID of a Bi-Indirect Block.  A Bi-Indirect Block is a block that contains an array of Block ID, each pointing to an
      Indirect Block.  Each of those Indirect Blocks then contain in turn an array of Block ID pointing to blocks of data.
     </para>
    </sect3>
    <sect3 id="i-tind-block"><title>Tri-Indirect Block</title>
     <programlisting>
label: i_tind_block              offset: 56 (0x38)
name : Tri-Indirect Block        size  : unsigned 64bit</programlisting>
     <para>
      Block ID of a Tri-Indirect Block.  A Tri-Indirect Block is a block that contains an array of Block ID, each pointing to a
      Bi-Indirect Block.
     </para>
    </sect3>
   </sect2>
  </sect1>

  <sect1 id="bad-block-file"><title>Bad Block File</title>
   <para>
    This file contains a list of 64bit unsigned Block ID values.  Each defined Block ID is marked as unuseable, probably due
    to damaged physical storage.
   </para><para>
    You can locate this file by reading the Inode <link linkend="s-bad-block-inode">s_bad_block_inode</> as identified in
    the <link linkend="superblock">Superblock</>.
   </para>
  </sect1>
  <sect1 id="journal-file"><title>Journal File</title>
   <para>
    The Journal File format has yet to be specified.  All we know is that we eventually want to have both structure and data journalled.
   </para>
  </sect1>
  <sect1 id="uuu-time"><title>UUU-Time</title>
   <para>todo</para>
  </sect1>
 </chapter>
</book>
