# $Header: /home/xubuntu/berlios_backup/github/tmp-cvs/uuu/Repository/uuu/Make.config,v 1.11 2003/12/31 20:16:55 bitglue Exp $
#
# common configuration for makefiles
#
# This file is included by every makefile in the Uuu build system.


#
# Interesting options concerning the operation of the build system
#


# set this to on to see the commands being run
VERBOSE=off
COLOR=on

AS=nasm
AS_ELF=nasm -f elf
AS_BIN=nasm -f bin
ASFLAGS=-i $(UUUROOT)/include/ -p $(UUUROOT)/include/ref_count.asm -p $(UUUROOT)/include/ret_counts.asm -p $(UUUROOT)/include/macros.inc
export AS AS_ELF AS_BIN ASFLAGS

MKUDBFS=mkudbfs
MKUBBFSFLAGS=
export MKUDBFS MKUDBFSFLAGS

UDB_INSTBOOT = udb-instboot
UDB_INSTBOOT_FLAGS =
export UDB_INSBOOT UDB_INSBOOT_FLAGS

MKUUUBIMAGE = mkuuubimage
export MKUUUBIMAGE

XSLTPROC = xsltproc
export XSLTPROC


# flags used to link stage2 with zlib. If you can't run the "boot" command,
# it's likely because you are linking with a zlib that is not compatible with
# the target machine. If this is the case, it's very easy to build zlib from
# source. After you have built it, change ZLIB_LDFLAGS to simply the full path
# to libz.a that zlib creates.

ifndef ZLIB_LDFLAGS
  ZLIB_LDFLAGS = -L/usr/lib -lz
  # ZLIB_LDFLAGS = /home/uuuuser/zlib-1.1.4/libz.a
  export ZLIB_LDFLAGS
endif

ARCH=x86
export ARCH


# what directories in which to search for source files.

SOURCE_DIRS = fs sys util lib


#
# Interesting options concerning the operation of Uuu at runtime
#


ifeq ($(VERBOSE),on)
  echo=:
else
  echo=echo
  .SILENT:
endif

ifeq ($(COLOR),on)
entering=$(echo)	"[01;34mentering[00m"
cleaning=$(echo)	"[01;34mcleaning[00m"
assembling=$(echo)	"  [01;32massembling[00m"
generating=$(echo)	"  [01;32mgenerating[00m"
compressing=$(echo)	"  [01;32mcompressing[00m"
linking=$(echo)		"  [01;32mlinking[00m"
else
entering=$(echo)	"entering"
cleaning=$(echo)	"cleaning"
assembling=$(echo)	"  assembling"
generating=$(echo)	"  generating"
compressing=$(echo)	"  compressing"
linking=$(echo)		"  linking"
endif

%.bin: %.asm
	$(assembling) '$<  >  $@'
	$(AS_BIN) -o $@ $(ASFLAGS) -- $<

%.o: %.asm
	$(assembling) '$<  >  $@'
	$(AS_ELF) -o $@ $(ASFLAGS) -- $<

%.d: %.asm $(UUUROOT)/include/ret_counts.asm
	set -e
	$(AS) -M $(ASFLAGS) $< | sed 's/\($*\)\s*:/\1.bin \1.o $@ : /g' > $@
	[ -s $@ ] || rm -f $@

basic-clean:
	rm -f *.d


# vim: syn=make
